Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance[1:(length(Data_with_wells_distance)-11)]
Data_with_wells_distance <-Data_with_wells_distance %>% rename(lat = "lat.x")
Data.clust.list <- Data_with_wells_distance %>% mutate(year = year(date))
Data.clust.list <- split(Data.clust.list,list(Data.clust.list$basin, Data.clust.list$year))
minpts.grid = 3:8 #the minpts used in HDBSCAN from 3-8 inclusive
#Applying HDBSCAN
for(c in 1:length(Data.clust.list)){
if(nrow(Data.clust.list[[c]]) > 40e3){
Data.clust.list = c(
Data.clust.list,
Data.clust.list[[c]] %>% filter(month(date) > 6) %>% list()
)
Data.clust.list[[c]] = Data.clust.list[[c]] %>%
filter(month(date) <= 6)
}
}
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
#merges the list of objects
Output_Data <- Data.clust.list[[1]]
for (i in 2:length(Data.clust.list)){
Output_Data <- merge(Output_Data, Data.clust.list[[i]], all = TRUE)
}
#Filter out Non clustered (cluster = 0)
Output_Data <- Output_Data %>% filter(clustered != 0)
View(Data)
View(Data)
Final_Data <- merge(Output_Data, Data, by = "vnf_id")
View(Data_with_wells_distance)
Final_Data <- merge(Output_Data, Data_with_wells_distance, by = "vnf_id")
View(Final_Data)
saveRDS(Final_Data, "VNF_2022-2023.rds")
Ethan_2022_2023 <- readRDS("VNF_2022-2023.rds")
View(Ethan_2022_2023)
Ethan_2022_2023$vnf_lat <- Ethan_2022_2023$lat
Ethan_2022_2023$vnf_lon <- Ethan_2022_2023$lon
Ethan_2022_2023_spatial <-  st_as_sf(Ethan_2022_2023, coords = c("long", "lat"), crs = 4326)
Ethan_2022_2023_spatial <-  st_as_sf(Ethan_2022_2023, coords = c("vnf_lat", "vnf_lon"), crs = 4326)
Ethan_2022_2023_zip_intersection <- st_join(Ethan_2022_2023_spatial, ZIP_valid)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(raster)
Counties_Spatial <- st_read("../KenData/counties.shp")
ZIP_Spatial <- st_read("../KenData/zips.shp")
ZIP_valid <- subset(ZIP_Spatial, st_is_valid(ZIP_Spatial))
Ethan_2022_2023_zip_intersection <- st_join(Ethan_2022_2023_spatial, ZIP_valid)
View(Ethan_2022_2023_zip_intersection)
Ethan_2022_2023 <- readRDS("VNF_2022-2023.rds")
Ethan_2022_2023$vnf_lat <- Ethan_2022_2023$lat
Ethan_2022_2023$vnf_lon <- Ethan_2022_2023$lon
Ethan_2022_2023_spatial <-  st_as_sf(Ethan_2022_2023, coords = c("vnf_lon", "vnf_lat"), crs = 4326)
Ethan_2022_2023_zip_intersection <- st_join(Ethan_2022_2023_spatial, ZIP_valid)
View(Ethan_2022_2023_zip_intersection)
Ethan_2022_2023_non_NA <- na.omit(Ethan_2022_2023_zip_intersection)
View(Ethan_2022_2023_non_NA)
Ethan_2022_2023_non_NA <- na.omit(Ethan_2022_2023_zip_intersection) %>% as.data.frame() %>% rename(long = "lon", basin = "basin.x")
View(Ethan_2022_2023_zip_intersection)
Ethan_2022_2023_FINAL <- Ethan_2022_2023_non_NA %>% select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
Ethan_2022_2023_FINAL <- Ethan_2022_2023_non_NA %>% dplyr::select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
Final_Data_2012_2022 <- rbind(Data_final_2016_2022, Ken_2012_2016_FINAL, Ethan_2022_2023_FINAL)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(raster)
Counties_Spatial <- st_read("../KenData/counties.shp")
ZIP_Spatial <- st_read("../KenData/zips.shp")
ZIP_valid <- subset(ZIP_Spatial, st_is_valid(ZIP_Spatial))
# #------------------------------------------------------IGNORE------------------------------------#
#Data did not involve cluster so ignore everything commented out.
#
#
#Loading Data from Jerry
# EF_vnf <- readRDS("../JerryData/ef_vnf/ef-vnf.rds")
# PB_vnf <- readRDS("../JerryData/pb_vnf/pb-vnf.rds")
#
#
# #Converting Coordinates (Long/Lat) in Jerry's Data both EF_vnf and PB_vnf
# EF_vnf_coordinates <- st_as_sf(EF_vnf, coords = c("lon", "lat"), crs = 4326)
# PB_vnf_coordinates <- st_as_sf(PB_vnf, coords = c("lon", "lat"), crs = 4326)
#
#
# #Joining Counties and Jerry's Data (Permian Basin)
# PB_vnf_counties_join <- st_join(PB_vnf_coordinates, Counties_Spatial)
#
# #Joining Counties and Jerry's Data(Eagle Ford)
# EF_vnf_coordinates <- st_join(EF_vnf_coordinates, Counties_Spatial)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# PB_final <- st_join(PB_vnf_coordinates, ZIP_valid)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# EF_final <- st_join(EF_vnf_coordinates, ZIP_valid)
# #Permian Basin
# PB_final<- PB_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column (EF)
# PB_final <- PB_final[, -16]
#
#
# #Eagle Ford
# EF_final<- EF_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column  (EF)
# EF_final <- EF_final[, -21]
#
#
# #Filtering out temperatures
#
# PB_final <- PB_final %>% filter(temp_bb > 1600)
# EF_final <- EF_final %>% filter(temp_bb > 1600)
#
# #Selecting only columns of interest
# PB_final <- PB_final %>% dplyr::select(vnf_id, date, long, lat, zip, state, basin, county)
# EF_final <- EF_final %>% dplyr::select(vnf_id, date, county.y, zip, basin, long, lat, state.y)%>%rename(state = state.y, county = county.y)
#
# #Removing NA
# PB_final <- na.omit(PB_final)
# EF_final <- na.omit(EF_final)
#
#
# #Combining the Data
# Final_Data <- rbind(PB_final, EF_final)
#
# #Writing the file
# write_rds(EF_final, "EF_final.rds")
# write_rds(PB_final, "PB_final.rds")
# write_rds(Final_Data, "VNF_data_final_2012-2022.rds")
#
#------------------------------------------------------UPDATE------------------------------------#
#After receiving Jerry's Updated Data
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
#Filtering out temperatures and noise
Data_filter_2016_2022 <- Data_join_2016_2022 %>% filter(temp_bb > 1600, cluster != 0)
#Filtering out NA
Data_final_2016_2022 <- na.omit(Data_filter_2016_2022)
Data_final_2016_2022 <- Data_final_2016_2022 %>%st_transform(crs = 4326) %>%as.data.frame()
Data_final_2016_2022 <- Data_final_2016_2022 %>% rename(long = "vnf_lon", lat = "vnf_lat", county = "county.y", state = "state.y")
Data_final_2016_2022 <- Data_final_2016_2022 %>% dplyr::select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
#Loading Ken's Data and joining it with Data_final_2016_2022
Ken_2012_2020 <- readRDS("../KenData/vnf-2012-2020.rds")
#filtering out everything after 2016-01-03 inclusive
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
#Filtering out NA
Ken_2012_2016_non_na <-  na.omit(Ken_2012_2016_zip_intersection) %>% as.data.frame()
Ken_2012_2016_non_na <- Ken_2012_2016_non_na[,-ncol(Ken_2012_2016_non_na)] %>% rename(lat = "vnf_lat", long = "vnf_lon", county = "county.y",
basin = "basin.x")
Ken_2012_2016_FINAL <-  Ken_2012_2016_non_na %>% dplyr::select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
#Loading 2022(Sept) -2023
Ethan_2022_2023 <- readRDS("VNF_2022-2023.rds")
Ethan_2022_2023$vnf_lat <- Ethan_2022_2023$lat
Ethan_2022_2023$vnf_lon <- Ethan_2022_2023$lon
Ethan_2022_2023_spatial <-  st_as_sf(Ethan_2022_2023, coords = c("vnf_lon", "vnf_lat"), crs = 4326)
Ethan_2022_2023_zip_intersection <- st_join(Ethan_2022_2023_spatial, ZIP_valid)
Ethan_2022_2023_non_NA <- na.omit(Ethan_2022_2023_zip_intersection) %>% as.data.frame() %>% rename(long = "lon", basin = "basin.x")
Ethan_2022_2023_FINAL <- Ethan_2022_2023_non_NA %>% dplyr::select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
Final_Data_2012_2022 <- rbind(Data_final_2016_2022, Ken_2012_2016_FINAL, Ethan_2022_2023_FINAL)
test <- Ken_2012_2020 %>%filter(!(basin == "WILLISTON"))
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
View(Ethan_2022_2023_zip_intersection)
View(Ken_2012_2016_zip_intersection)
Final_Data_2012_2023 <- rbind(Data_final_2016_2022, Ken_2012_2016_FINAL, Ethan_2022_2023_FINAL)
saveRDS(Final_Data_2012_2023, "VNF_data_final_2012-2023.rds")
saveRDS(Final_Data_2012_2023, "VNF_data_final_2012-2023.rds")
setwd("~/Desktop/Current School Stuff/NSERC Shiny Application/Data/Data_Merging")
saveRDS(Final_Data_2012_2023, "VNF_data_final_2012-2023.rds")
Data <- readRDS("data/VNF_data_final_2012-2023.rds")
setwd("~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp")
Data <- readRDS("data/VNF_data_final_2012-2023.rds")
Data <- readRDS("data/VNF_data_final_2012-2023.rds")
shiny::runApp()
runApp()
shiny::runApp()
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
#Filtering out NA
View(Ken_2012_2016_non_na)
View(Ken_2012_2016_zip_intersection)
ZIP_Spatial <- st_read("../KenData/zips.shp")
setwd("~/Desktop/Current School Stuff/NSERC Shiny Application/Data/Data_Merging")
ZIP_Spatial <- st_read("../KenData/zips.shp")
View(ZIP_Spatial)
View(ZIP_valid)
View(ZIP_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_Spatial)
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_Spatial)
View(ZIP_valid)
View(ZIP_Spatial)
View(Wells_Merged)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
View(Ethan_2022_2023_zip_intersection)
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
View(Ken_2012_2016_zip_intersection)
ZIP_Spatial <- st_is_valid(ZIP_Spatial)
ZIP_Spatial <- st_read("../KenData/zips.shp")
x <- anti_join(ZIP_Spatial, ZIP_valid)
x <- st_difference(ZIP_Spatial, ZIP_valid)
x <- st_is_valid(ZIP_Spatial)
x <- st_is_valid(ZIP_Spatial)
x
test <- st_buffer(ZIP_Spatial)
test <- st_make_valid(ZIP_Spatial)
View(test)
ZIP_valid <- st_is_valid(ZIP_Spatial)
ZIP_valid
ZIP_valid <- st_make_valid(ZIP_Spatial)
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
#Filtering out temperatures and noise
Data_filter_2016_2022 <- Data_join_2016_2022 %>% filter(temp_bb > 1600, cluster != 0)
#filtering out everything after 2016-01-03 inclusive
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
View(Ken_2012_2016_zip_intersection)
ZIP_valid <- st_make_valid(ZIP_Spatial)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(raster)
Counties_Spatial <- st_read("../KenData/counties.shp")
ZIP_Spatial <- st_read("../KenData/zips.shp")
# ZIP_valid <- st_make_valid(ZIP_Spatial)
ZIP_valid <- subset(ZIP_Spatial, st_is_valid(ZIP_Spatial))
# #------------------------------------------------------IGNORE------------------------------------#
#Data did not involve cluster so ignore everything commented out.
#
#
#Loading Data from Jerry
# EF_vnf <- readRDS("../JerryData/ef_vnf/ef-vnf.rds")
# PB_vnf <- readRDS("../JerryData/pb_vnf/pb-vnf.rds")
#
#
# #Converting Coordinates (Long/Lat) in Jerry's Data both EF_vnf and PB_vnf
# EF_vnf_coordinates <- st_as_sf(EF_vnf, coords = c("lon", "lat"), crs = 4326)
# PB_vnf_coordinates <- st_as_sf(PB_vnf, coords = c("lon", "lat"), crs = 4326)
#
#
# #Joining Counties and Jerry's Data (Permian Basin)
# PB_vnf_counties_join <- st_join(PB_vnf_coordinates, Counties_Spatial)
#
# #Joining Counties and Jerry's Data(Eagle Ford)
# EF_vnf_coordinates <- st_join(EF_vnf_coordinates, Counties_Spatial)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# PB_final <- st_join(PB_vnf_coordinates, ZIP_valid)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# EF_final <- st_join(EF_vnf_coordinates, ZIP_valid)
# #Permian Basin
# PB_final<- PB_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column (EF)
# PB_final <- PB_final[, -16]
#
#
# #Eagle Ford
# EF_final<- EF_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column  (EF)
# EF_final <- EF_final[, -21]
#
#
# #Filtering out temperatures
#
# PB_final <- PB_final %>% filter(temp_bb > 1600)
# EF_final <- EF_final %>% filter(temp_bb > 1600)
#
# #Selecting only columns of interest
# PB_final <- PB_final %>% dplyr::select(vnf_id, date, long, lat, zip, state, basin, county)
# EF_final <- EF_final %>% dplyr::select(vnf_id, date, county.y, zip, basin, long, lat, state.y)%>%rename(state = state.y, county = county.y)
#
# #Removing NA
# PB_final <- na.omit(PB_final)
# EF_final <- na.omit(EF_final)
#
#
# #Combining the Data
# Final_Data <- rbind(PB_final, EF_final)
#
# #Writing the file
# write_rds(EF_final, "EF_final.rds")
# write_rds(PB_final, "PB_final.rds")
# write_rds(Final_Data, "VNF_data_final_2012-2022.rds")
#
#------------------------------------------------------UPDATE------------------------------------#
#After receiving Jerry's Updated Data
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
#Filtering out temperatures and noise
Data_filter_2016_2022 <- Data_join_2016_2022 %>% filter(temp_bb > 1600, cluster != 0)
#Filtering out NA
Data_final_2016_2022 <- na.omit(Data_filter_2016_2022)
Data_final_2016_2022 <- Data_final_2016_2022 %>%st_transform(crs = 4326) %>%as.data.frame()
Data_final_2016_2022 <- Data_final_2016_2022 %>% rename(long = "vnf_lon", lat = "vnf_lat", county = "county.y", state = "state.y")
Data_final_2016_2022 <- Data_final_2016_2022 %>% dplyr::select("vnf_id", "date", "long", "lat", "zip", "state", "basin", "county")
#Loading Ken's Data and joining it with Data_final_2016_2022
Ken_2012_2020 <- readRDS("../KenData/vnf-2012-2020.rds")
#filtering out everything after 2016-01-03 inclusive
Ken_2012_2016 <- Ken_2012_2020 %>% filter(!(date>= ("2016-01-03")), !(basin == "WILLISTON"))
Ken_2012_2016$lat <- Ken_2012_2016$vnf_lat
Ken_2012_2016$long <- Ken_2012_2016$vnf_lon
Ken_2012_2016_coord <- st_as_sf(Ken_2012_2016, coords = c("long", "lat"), crs = 4326)
Ken_2012_2016_zip_intersection <- st_join(Ken_2012_2016_coord, ZIP_valid) #adding the zip codes spatially joining
#Filtering out NA
View(ZIP_valid)
View(ZIP_Spatial)
st_difference(ZIP_Spatial, ZIP_valid)
Counties_Spatial <- st_read("../KenData/counties.shp")
ZIP_Spatial <- st_read("../KenData/zips.shp")
# ZIP_valid <- st_make_valid(ZIP_Spatial)
ZIP_valid <- subset(ZIP_Spatial, st_is_valid(ZIP_Spatial))
x <- ZIP_Spatial %>% filter(zip <= 77994)
st_intersection(x , ZIP_Spatial)
st_intersection(x , ZIP_valid)
x <- ZIP_Spatial %>% filter(zip <= 58540)
st_intersection(x , ZIP_valid)
x <- ZIP_Spatial %>% filter(zip <= 58540)
> st_intersection(x , ZIP_valid)
z1_BEFORE <- ZIP_Spatial
z1_Before <- z1_Before %>% as.data.frame()
z1_BEFORE <- z1_BEFORE %>% as.data.frame()
z2_BEFORE <- ZIP_valid
z2_BEFORE <- z2_BEFORE %>% as.data.frame()
UNIQUE <- subset(z1_BEFORE, !(z1_BEFORE$zip %in% z2_BEFORE$zip))
View(UNIQUE)
ZIP_valid <- ZIP_Spatial[-37,]
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(raster)
Counties_Spatial <- st_read("../KenData/counties.shp")
ZIP_Spatial <- st_read("../KenData/zips.shp")
ZIP_valid <- ZIP_Spatial[-37,]
# ZIP_valid <- subset(ZIP_Spatial, st_is_valid(ZIP_Spatial))
# #------------------------------------------------------IGNORE------------------------------------#
#Data did not involve cluster so ignore everything commented out.
#
#
#Loading Data from Jerry
# EF_vnf <- readRDS("../JerryData/ef_vnf/ef-vnf.rds")
# PB_vnf <- readRDS("../JerryData/pb_vnf/pb-vnf.rds")
#
#
# #Converting Coordinates (Long/Lat) in Jerry's Data both EF_vnf and PB_vnf
# EF_vnf_coordinates <- st_as_sf(EF_vnf, coords = c("lon", "lat"), crs = 4326)
# PB_vnf_coordinates <- st_as_sf(PB_vnf, coords = c("lon", "lat"), crs = 4326)
#
#
# #Joining Counties and Jerry's Data (Permian Basin)
# PB_vnf_counties_join <- st_join(PB_vnf_coordinates, Counties_Spatial)
#
# #Joining Counties and Jerry's Data(Eagle Ford)
# EF_vnf_coordinates <- st_join(EF_vnf_coordinates, Counties_Spatial)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# PB_final <- st_join(PB_vnf_coordinates, ZIP_valid)
#
# #Joining ZIP and Jerry's Data(Permian Basin) with Counties
# EF_final <- st_join(EF_vnf_coordinates, ZIP_valid)
# #Permian Basin
# PB_final<- PB_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column (EF)
# PB_final <- PB_final[, -16]
#
#
# #Eagle Ford
# EF_final<- EF_final %>%st_transform(crs = 4326) %>%
#   mutate(
#     long = st_coordinates(.)[, "X"],
#     lat = st_coordinates(.)[, "Y"]
#   )%>% as.data.frame()
#
# #Drop last column  (EF)
# EF_final <- EF_final[, -21]
#
#
# #Filtering out temperatures
#
# PB_final <- PB_final %>% filter(temp_bb > 1600)
# EF_final <- EF_final %>% filter(temp_bb > 1600)
#
# #Selecting only columns of interest
# PB_final <- PB_final %>% dplyr::select(vnf_id, date, long, lat, zip, state, basin, county)
# EF_final <- EF_final %>% dplyr::select(vnf_id, date, county.y, zip, basin, long, lat, state.y)%>%rename(state = state.y, county = county.y)
#
# #Removing NA
# PB_final <- na.omit(PB_final)
# EF_final <- na.omit(EF_final)
#
#
# #Combining the Data
# Final_Data <- rbind(PB_final, EF_final)
#
# #Writing the file
# write_rds(EF_final, "EF_final.rds")
# write_rds(PB_final, "PB_final.rds")
# write_rds(Final_Data, "VNF_data_final_2012-2022.rds")
#
#------------------------------------------------------UPDATE------------------------------------#
#After receiving Jerry's Updated Data
Data_2016_2022 <- readRDS("../JerryData/flare_full.rds")
Data_2016_2022$long <- Data_2016_2022$vnf_lon
Data_2016_2022$lat <- Data_2016_2022$vnf_lat
Data_coord_2016_2022 <-  st_as_sf(Data_2016_2022, coords = c("long", "lat"), crs = 4326)
Data_join_2016_2022 <- st_join(Data_coord_2016_2022, Counties_Spatial)
Data_join_2016_2022 <- st_join(Data_join_2016_2022, ZIP_valid)
ZIP_Spatial <- st_read("../KenData/zips.shp")
runApp('~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp')
runApp('~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp')
runApp('~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp')
runApp('~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp')
runApp('~/Desktop/Current School Stuff/NSERC Shiny Application/ShinyApp')
