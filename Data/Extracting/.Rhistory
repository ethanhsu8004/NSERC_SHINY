# get CSV name for unzipped file
csv.name = gsub(".gz", "", gz.name)
# download & process ----
# try to download the file, error handler in case of no data
tryCatch({
# message indicating date being downloaded
cat("[", as.character(vnf.dates[d]),'] download. ', sep='')
# downloads the file ----
download.file(url.name, gz.name,
mode = 'wb', quiet = TRUE,
headers = list(Authorization = auth))
# unzips GZ, keeps the CSV, removes the GZ
R.utils::gunzip(gz.name, overwrite = TRUE)
# process
cat('process. ', sep='')
# process the file ----
vnf.temp = fread(csv.name) %>%
rename_all(tolower) %>% # rename all columns to lowercase for convenience
select(all_of(vnf.cols)) %>% # collect relevant columns
na_if(999999) %>% # replace 999999 as missing
filter(!is.na(temp_bb)) %>% # keep those not missing temperature
# generate unique VNF_ID and valid date-format date column
mutate(vnf_id = paste0('VNF', gsub('-','',vnf.dates[d]), sprintf('%06d', 1:nrow(.))),
date = as.Date(substr(date_mscan, 1, 10), format = "%Y/%m/%d"),
file_date = vnf.dates[d]) %>%
# collect and rename certain columns, and drop a few
select(vnf_id, date, lon = lon_gmtco, lat = lat_gmtco,
everything(), -date_mscan) %>%
# filter by lat & lon bounds (bbox)
filter(lon >= lon_bounds[1], lon <= lon_bounds[2],
lat >= lat_bounds[1], lat <= lat_bounds[2])
# delete CSV file
file.remove(csv.name)
# report time took t to download and process ----
cat(difftime(Sys.time(), start_time, units='secs') %>% ceiling(),
" secs.\r", sep='')
}, error = function(e){
print(e)
})
# append to existing data
vnf = rbindlist(
list(vnf,
vnf.temp))
# output every 50 days. updating every day would be pretty slow
if(d %% 50 == 0 | d == length(vnf.dates)){
saveRDS(vnf, paste0(data.dir, "ef_vnf/ef-vnf.rds"))
}
}
eia.pb.vnf = pb.vnf %>% filter(temp_bb >= 1600)
# generate list of basins
basins = pb.ef$basin %>% unique()
eia.vnf.xy = list()
# Step 1: Filter VNF by > 1600K tempeture ---------------------------------
eia.pb.vnf = pb.vnf %>% filter(temp_bb >= 1600)
vnf.data.exist = file.exists(paste0(data.dir, "ef_vnf/ef-vnf.rds"))
end_date = as.Date("2022-08-31")
if(vnf.data.exist){
vnf = readRDS(paste0(data.dir, "ef_vnf/ef-vnf.rds"))
# start new update from date after last date in existing data
start_date = max(vnf$file_date) + 1
} else {
vnf = data.table(
vnf_id = character(),
date = as.Date(character()),
lon = numeric(),
lat = numeric(),
temp_bb = integer(),
temp_bkg = integer(),
esf_bb = numeric(),
rhi = numeric(),
rh = numeric(),
area_pixel = numeric(),
area_bb = numeric(),
cloud_mask = integer(),
file_date = as.Date(character())
)
# start new update from date after last date in existing data
start_date = as.Date("2012-03-01")
}
# vector of dates
if(start_date > end_date){
stop("Invalid dates for update.")
} else{
vnf.dates = seq(start_date, end_date, "days")
}
for(d in 1:length(vnf.dates)){
# prep ----
# starts timer to track download time
start_time = Sys.time()
# creates URL and GZ names, with date cutoff between V21 CLASS and V30 GRAVITE
if(vnf.dates[d] <= as.Date('2017-12-05')){
# V21 CLASS version
url.name = paste0(vnfv21.url.pfx[1],
gsub('-', '', vnf.dates[d]), vnfv21.url.pfx[2])
gz.name = paste0(data.dir, 'ef_vnf/raw/', basename(url.name))
} else{
# V30 GRAVITE version
url.name = paste0(vnfv30.url.pfx[1],
gsub('-', '', vnf.dates[d]), vnfv30.url.pfx[2])
gz.name = paste0(data.dir, 'ef_vnf/raw/', basename(url.name))
}
# get CSV name for unzipped file
csv.name = gsub(".gz", "", gz.name)
# download & process ----
# try to download the file, error handler in case of no data
tryCatch({
# message indicating date being downloaded
cat("[", as.character(vnf.dates[d]),'] download. ', sep='')
# downloads the file ----
download.file(url.name, gz.name,
mode = 'wb', quiet = TRUE,
headers = list(Authorization = auth))
# unzips GZ, keeps the CSV, removes the GZ
R.utils::gunzip(gz.name, overwrite = TRUE)
# process
cat('process. ', sep='')
# process the file ----
vnf.temp = fread(csv.name) %>%
rename_all(tolower) %>% # rename all columns to lowercase for convenience
select(all_of(vnf.cols)) %>% # collect relevant columns
na_if(999999) %>% # replace 999999 as missing
filter(!is.na(temp_bb)) %>% # keep those not missing temperature
# generate unique VNF_ID and valid date-format date column
mutate(vnf_id = paste0('VNF', gsub('-','',vnf.dates[d]), sprintf('%06d', 1:nrow(.))),
date = as.Date(substr(date_mscan, 1, 10), format = "%Y/%m/%d"),
file_date = vnf.dates[d]) %>%
# collect and rename certain columns, and drop a few
select(vnf_id, date, lon = lon_gmtco, lat = lat_gmtco,
everything(), -date_mscan) %>%
# filter by lat & lon bounds (bbox)
filter(lon >= lon_bounds[1], lon <= lon_bounds[2],
lat >= lat_bounds[1], lat <= lat_bounds[2])
# delete CSV file
file.remove(csv.name)
# report time took t to download and process ----
cat(difftime(Sys.time(), start_time, units='secs') %>% ceiling(),
" secs.\r", sep='')
}, error = function(e){
print(e)
})
# append to existing data
vnf = rbindlist(
list(vnf,
vnf.temp))
# output every 50 days. updating every day would be pretty slow
if(d %% 50 == 0 | d == length(vnf.dates)){
saveRDS(vnf, paste0(data.dir, "ef_vnf/ef-vnf.rds"))
}
}
pb.vnf = paste0(data.dir, "pb_vnf/pb-vnf.rds") %>% readRDS() %>%
# Filter for detections with strongest confidence (cloud mask = 0)
filter(cloud_mask == 0) %>%
# select and rename some columns
dplyr::select(vnf_id, date, vnf_lon = lon, vnf_lat = lat,
temp_bb, area_bb, rhi) %>%
filter(!(date < "2016-01-01"))
ef.vnf = paste0(data.dir, "ef_vnf/ef-vnf.rds") %>% readRDS() %>%
# Filter for detections with strongest confidence (cloud mask = 0)
filter(cloud_mask == 0) %>%
# select and rename some columns
dplyr::select(vnf_id, date, vnf_lon = lon, vnf_lat = lat,
temp_bb, area_bb, rhi) %>%
filter(!(date < "2016-01-01"))
data.dir = paste0(getwd(), '/data/')
code.dir = paste0(getwd())
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
library(dplyr)
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
library(dplyr)
library(httr)
library(jsonlite)
library(utils)
pkgs = c('data.table', 'R.utils', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
code.dir = paste0(getwd())
data.dir = paste0(getwd(), '/data/')
#EAGLE FORD!
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_pb <- readRDS("JerryData/pb_vnf/pb-vnf.rds")
draft_file <- file.choose()
x <- readRDS(draft_file)
View(x)
test <- x %>% filter(date <= "2017-01-01")
library(dplyr)
test <- x %>% filter(date <= "2017-01-01")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
setwd("~/Desktop/Current School Stuff/NSERC Shiny Application/Data/Extracting")
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
#
Data.clust.list <- Data %>% mutate(year = year(date)) %>% #splits by year and basin and creates a list
split(by = c("basin", "year"))
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
#
Data.clust.list <- Data %>% mutate(year = year(date)) %>% #splits by year and basin and creates a list
split(by = c("basin", "year"))
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
Data.clust.list <- Data %>% mutate(year = year(date))
Data.clust.list <- Data %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
Data.clust.list <- Data_with_wells_distance  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data.clust.list <- Data  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
View(Data_with_wells_distance)
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data.clust.list <- Data  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
View(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance[, 11]
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance[1:(length(Data_with_wells_distance)-11)]
Data.clust.list <- Data  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
View(Data)
Data_with_wells_distance <- Data_with_wells_distance[, -ncol(Data_with_wells_distance)]
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
source("~/Desktop/Current School Stuff/NSERC Shiny Application/Data/Extracting/VNF-Process.R", echo=TRUE)
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance[1:(length(Data_with_wells_distance)-10)]
View(Data_with_wells_distance)
library(dplyr)
library(dbscan)
pkgs = c('data.table', 'dbscan', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
#Loading Data
PB_data <- readRDS("pb_vnf/pb_vnf.rds")
EF_data <- readRDS("ef_vnf/ef_vnf.rds")
#Loading Wells
PB_wells <- readRDS("wells/cleaned_wells_pb.rds")
EF_wells <- readRDS("Wells/cleaned_wells_ef.rds")
#Filtering for Permian Basin
PB_data <- PB_data %>% filter(temp_bb > 1600, cloud_mask == 0)
PB_data <- PB_data %>% select(-temp_bkg, -cloud_mask, -file_date)
PB_data$basin <- "Permian"
#Filtering for Western Gulf Basin
EF_data <- EF_data %>%  filter(temp_bb > 1600, cloud_mask == 0)
EF_data <- EF_data %>% select(-temp_bkg, -cloud_mask, -file_date)
EF_data$basin <- "Western Gulf"
#Combining both
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
#Merging the wells data
Wells_Merged <- rbind(PB_wells, EF_wells)
Wells_Merged$lat <- Wells_Merged$uog_lat
Wells_Merged$long <- Wells_Merged$uog_lon
Wells_Merged <- st_as_sf(Wells_Merged, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data_with_wells_distance <- st_join(Data, Wells_Merged, join = st_is_within_distance, dist = 1e3)
Data_with_wells_distance <- Data_with_wells_distance %>% distinct(vnf_id, .keep_all = TRUE)
#Getting rid of flaring not near wells
Data_with_wells_distance <- Data_with_wells_distance %>% filter(!drill_type == "NA")
Data_with_wells_distance <- as.data.frame(Data_with_wells_distance)
Data_with_wells_distance <- Data_with_wells_distance[1:(length(Data_with_wells_distance)-11)]
View(Data_with_wells_distance)
Data.clust.list <- Data_with_wells_distance  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
View(Data)
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data.clust.list <- Datae  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
Data.clust.list <- Data  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
View(Data)
Data <- rbind(PB_data, EF_data) #Joining the two datasets
Data$uog_lat <- Data$lat
Data$uog_lon <- Data$lon
Data <- st_as_sf(Data, coords = c("uog_lon", "uog_lat"), crs = 4326)
Data.clust.list <- Data_with_wells_distance  %>% mutate(year = year(date)) %>% split(by = c("basin", "year"))
Data.clust.list <- split(Data_with_wells_distance, by = c("basin", "year"))
